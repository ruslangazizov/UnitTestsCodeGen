//
//  TestFileManager.swift
//  UnitTestsCodeGen
//
//  Created by Руслан on 02.04.2023.
//

import Foundation

final class TestFileManager {

    // Dependencies
    private let fileManager = FileManager.default

    // Properties
    var className: String?
    var testsFilePath: String?

    // MARK: - Internal

    func createFile(fileName: String?, typeName: String) -> String? {
        let className = fileName ?? (typeName + "Tests")
        let fileName = className + ".swift"
        let testsFilePath = fileManager.currentDirectoryPath + "/" + fileName
        if fileManager.createFile(atPath: testsFilePath, contents: nil) {
            self.className = className
            self.testsFilePath = testsFilePath
            return testsFilePath
        } else {
            return nil
        }
    }

    func writeToFile(path: String, content: String) {
        if let fileHandle = FileHandle(forWritingAtPath: path),
           let data = content.data(using: .utf8) {
            try? fileHandle.write(contentsOf: data)
            try? fileHandle.close()
        }
    }

    func generateFileContents(typeName: String,
                              params: [String: String],
                              filesSubStructures: [SyntaxStructure]) {
        guard let className = className,
              let testsFilePath = testsFilePath else { return }
        var contents: [String] = []
        contents.append("""
        // Auto-Generated by UnitTestsCodeGen

        import Foundation
        #if os(iOS) || os(tvOS) || os(watchOS)
        import UIKit
        #elseif os(OSX)
        import AppKit
        #endif
        import XCTest

        """)
        // TODO: добавить вставку обычных и тестовых импортов, переданных через аргументы
        contents.append("final class \(className): XCTestCase {")

        var intendedContents: [String] = [""]
        intendedContents.append("// System under test")
        intendedContents.append("private var sut: \(typeName)!")

        if !params.isEmpty {
            intendedContents.append("// Dependencies")
        }
        for (paramName, paramType) in params {
            intendedContents.append("private var \(paramName): \(paramType)!")
        }
        intendedContents.append("")

        intendedContents.append("override func setUp() {")
        intendedContents.append("    super.setUp()")
        var initParams: [String] = []
        for (paramName, paramType) in params {
            intendedContents.append("    \(paramName) = \(paramType)()")
            initParams.append("\(paramName): \(paramName)")
        }
        let initParamsString = initParams.joined(separator: ", ")
        intendedContents.append("    sut = \(typeName)(\(initParamsString))")
        intendedContents.append("}")
        intendedContents.append("")

        intendedContents.append("override func tearDown() {")
        intendedContents.append("    super.tearDown()")
        intendedContents.append("    sut = nil")
        for (paramName, _) in params {
            intendedContents.append("    \(paramName) = nil")
        }
        intendedContents.append("}")

        contents += intendedContents.map { "    " + $0 }
        contents.append("}")
        writeToFile(path: testsFilePath, content: contents.joined(separator: "\n"))
    }
}
